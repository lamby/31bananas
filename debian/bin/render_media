#!/usr/bin/env python

import os
import sys
import hashlib

sys.path.insert(0, '.')
sys.path.insert(0, 'contrib')

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lamby.settings')

from django.db import models
from django.template import Template, Context

def main():
    # Force importing of all modules and thus all templatetags.
    models.get_models()

    # Rendering of a (say) CSS files are cached if their contents do not
    # change. This is problematic if they use {% static "" %} tags though, as
    # we will not render a fresh file if the referenced filename changes as,
    # from our point of view, we do not know it has changed.
    #
    # To counter this, we namespace the cache key by a hash of the hashes.py
    # file.
    with open(sys.argv[1]) as f:
        hash_hash = hashlib.sha1(f.read()).hexdigest()

    for root in sys.argv[2:]:
        for dirpath, _, filenames in os.walk(root, followlinks=True):
            for filename in filenames:
                fullpath = os.path.join(dirpath, filename)

                with open(fullpath) as f:
                    contents = f.read()

                cache = '/tmp/cache_render_%s_%s' % (
                    hash_hash,
                    hashlib.sha1(contents).hexdigest(),
                )

                try:
                    with open(cache) as f:
                        contents = f.read()

                    print "I: Used %s from cache" % fullpath
                except:
                    contents = Template(contents).render(Context())

                    print "I: Rendered %s" % fullpath

                    with open(cache, 'w') as f:
                        f.write(contents)

                with open(fullpath, 'w') as f:
                    f.write(contents)

if __name__ == '__main__':
    main()
